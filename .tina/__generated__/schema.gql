# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  event(relativePath: String): Event!
  eventConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: EventFilter): EventConnection!
  theme(relativePath: String): Theme!
  themeConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ThemeFilter): ThemeConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalFilter): GlobalConnection!
}

input DocumentFilter {
  page: PageFilter
  post: PostFilter
  event: EventFilter
  theme: ThemeFilter
  global: GlobalFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Page | Post | Event | Theme | Global | Folder

type PageBlocksFeatureStyle {
  alignment: String
  padding: String
  featureImage: String
  featureContent: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

type GlobalBlocksFeatureBackgroundOrnaments {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

type PageBlocksFeatureBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksFeatureBackgroundOrnaments]
}

type PageBlocksFeatureImage {
  src: String
  alt: String
}

type PageBlocksFeatureButtons {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

type PageBlocksFeature {
  style: PageBlocksFeatureStyle
  background: PageBlocksFeatureBackground
  image: PageBlocksFeatureImage
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [PageBlocksFeatureButtons]
  navigationLabel: String
}

type PageBlocksCardsStyle {
  alignment: String
  padding: String
  featureContent: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

type PageBlocksCardsCardStyle {
  fillStyles: String
  grid: String
  alignment: String
  image: String
  imagePadding: String
  contentPadding: String
  borderStyles: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
  buttonTitle: String
  buttonType: String
  buttonLayout: String
  buttonWidth: String
}

type GlobalBlocksCardsBackgroundOrnaments {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

type PageBlocksCardsBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksCardsBackgroundOrnaments]
}

type PageBlocksCardsButtons {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

type GlobalBlocksCardsItemsImage {
  src: String
  alt: String
}

type PageBlocksCardsItems {
  image: GlobalBlocksCardsItemsImage
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  link: String
  buttonLabel: String
}

type PageBlocksCards {
  style: PageBlocksCardsStyle
  cardStyle: PageBlocksCardsCardStyle
  background: PageBlocksCardsBackground
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [PageBlocksCardsButtons]
  items: [PageBlocksCardsItems]
  navigationLabel: String
}

type PageBlocksAccordianStyle {
  alignment: String
  padding: String
  featureContent: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

type PageBlocksAccordianCardStyle {
  fillStyles: String
  fillStylesActive: String
  padding: String
  borderStyles: String
  typographyTitle: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

type PageBlocksAccordianBackgroundOrnaments {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

type PageBlocksAccordianBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [PageBlocksAccordianBackgroundOrnaments]
}

type PageBlocksAccordianButtons {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

type PageBlocksAccordianItems {
  headline: String
  subhead: String
  text: JSON
}

type PageBlocksAccordian {
  style: PageBlocksAccordianStyle
  cardStyle: PageBlocksAccordianCardStyle
  background: PageBlocksAccordianBackground
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [PageBlocksAccordianButtons]
  items: [PageBlocksAccordianItems]
  navigationLabel: String
}

type PageBlocksEmbedStyle {
  fullWidth: Boolean
  minHeight: String
  padding: String
}

type GlobalBlocksEmbedBackgroundOrnaments {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

type PageBlocksEmbedBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksEmbedBackgroundOrnaments]
}

type PageBlocksEmbed {
  style: PageBlocksEmbedStyle
  background: PageBlocksEmbedBackground
  markup: String
  navigationLabel: String
}

type PageBlocksTailwindFeatureTailwind {
  section: String
  wrap: String
  imageWrap: String
  image: String
  contentWrap: String
  content: String
  label: String
  headline: String
  subhead: String
  text: String
  buttons: String
  button: String
}

type GlobalBlocksTailwindFeatureBackgroundOrnaments {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

type PageBlocksTailwindFeatureBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksTailwindFeatureBackgroundOrnaments]
}

type PageBlocksTailwindFeatureImage {
  src: String
  alt: String
}

type PageBlocksTailwindFeatureButtons {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

type PageBlocksTailwindFeature {
  tailwind: PageBlocksTailwindFeatureTailwind
  background: PageBlocksTailwindFeatureBackground
  image: PageBlocksTailwindFeatureImage
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [PageBlocksTailwindFeatureButtons]
  navigationLabel: String
}

type PageBlocksTailwindCardsTailwind {
  section: String
  wrap: String
  imageWrap: String
  image: String
  contentWrap: String
  content: String
  label: String
  headline: String
  subhead: String
  text: String
  buttons: String
  button: String
  rule: String
  cardWrap: String
  card: String
  cardImageWrap: String
  cardImage: String
  cardContentWrap: String
  cardContent: String
  cardLabel: String
  cardHeadline: String
  cardSubhead: String
  cardText: String
  cardButtons: String
  cardButton: String
}

type GlobalBlocksTailwindCardsBackgroundOrnaments {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

type PageBlocksTailwindCardsBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksTailwindCardsBackgroundOrnaments]
}

type PageBlocksTailwindCardsButtons {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

type GlobalBlocksTailwindCardsItemsImage {
  src: String
  alt: String
}

type PageBlocksTailwindCardsItems {
  image: GlobalBlocksTailwindCardsItemsImage
  label: String
  headline: String
  subhead: String
  text: JSON
  link: String
  buttonLabel: String
}

type PageBlocksTailwindCards {
  tailwind: PageBlocksTailwindCardsTailwind
  background: PageBlocksTailwindCardsBackground
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [PageBlocksTailwindCardsButtons]
  items: [PageBlocksTailwindCardsItems]
  navigationLabel: String
}

type PageBlocksEventScheduleBackgroundOrnaments {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

type PageBlocksEventScheduleBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [PageBlocksEventScheduleBackgroundOrnaments]
}

type PageBlocksEventSchedule {
  background: PageBlocksEventScheduleBackground
  navigationLabel: String
  scheduleStartDate: String!
  scheduleEndDate: String!
  addEventLink: String
}

type PageBlocksEventTimelineStyle {
  fullWidth: Boolean
  minHeight: String
  padding: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

type PageBlocksEventTimelineBackgroundOrnaments {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

type PageBlocksEventTimelineBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [PageBlocksEventTimelineBackgroundOrnaments]
}

type PageBlocksEventTimeline {
  style: PageBlocksEventTimelineStyle
  background: PageBlocksEventTimelineBackground
  fathomId: String
  navigationLabel: String
}

union PageBlocks = PageBlocksFeature | PageBlocksCards | PageBlocksAccordian | PageBlocksEmbed | PageBlocksTailwindFeature | PageBlocksTailwindCards | PageBlocksEventSchedule | PageBlocksEventTimeline

type PageMeta {
  title: String
  description: String
  ogImage: String
}

type Page implements Node & Document {
  blocks: [PageBlocks]
  backgroundColor: String
  meta: PageMeta
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageBlocksFeatureStyleFilter {
  alignment: StringFilter
  padding: StringFilter
  featureImage: StringFilter
  featureContent: StringFilter
  typographyTitle: StringFilter
  labelStyles: StringFilter
  headlineStyles: StringFilter
  subheadStyles: StringFilter
  textStyles: StringFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input GlobalBlocksFeatureBackgroundOrnamentsFilter {
  src: ImageFilter
  alignment: StringFilter
  width: StringFilter
  height: StringFilter
  xOffset: StringFilter
  yOffset: StringFilter
}

input PageBlocksFeatureBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: GlobalBlocksFeatureBackgroundOrnamentsFilter
}

input PageBlocksFeatureImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PageBlocksFeatureButtonsFilter {
  label: StringFilter
  link: StringFilter
  buttonStyle: StringFilter
  fathomId: StringFilter
}

input PageBlocksFeatureFilter {
  style: PageBlocksFeatureStyleFilter
  background: PageBlocksFeatureBackgroundFilter
  image: PageBlocksFeatureImageFilter
  rule: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  body: RichTextFilter
  buttons: PageBlocksFeatureButtonsFilter
  navigationLabel: StringFilter
}

input PageBlocksCardsStyleFilter {
  alignment: StringFilter
  padding: StringFilter
  featureContent: StringFilter
  typographyTitle: StringFilter
  labelStyles: StringFilter
  headlineStyles: StringFilter
  subheadStyles: StringFilter
  textStyles: StringFilter
}

input PageBlocksCardsCardStyleFilter {
  fillStyles: StringFilter
  grid: StringFilter
  alignment: StringFilter
  image: StringFilter
  imagePadding: StringFilter
  contentPadding: StringFilter
  borderStyles: StringFilter
  typographyTitle: StringFilter
  labelStyles: StringFilter
  headlineStyles: StringFilter
  subheadStyles: StringFilter
  textStyles: StringFilter
  buttonTitle: StringFilter
  buttonType: StringFilter
  buttonLayout: StringFilter
  buttonWidth: StringFilter
}

input GlobalBlocksCardsBackgroundOrnamentsFilter {
  src: ImageFilter
  alignment: StringFilter
  width: StringFilter
  height: StringFilter
  xOffset: StringFilter
  yOffset: StringFilter
}

input PageBlocksCardsBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: GlobalBlocksCardsBackgroundOrnamentsFilter
}

input PageBlocksCardsButtonsFilter {
  label: StringFilter
  link: StringFilter
  buttonStyle: StringFilter
  fathomId: StringFilter
}

input GlobalBlocksCardsItemsImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PageBlocksCardsItemsFilter {
  image: GlobalBlocksCardsItemsImageFilter
  rule: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  body: RichTextFilter
  link: StringFilter
  buttonLabel: StringFilter
}

input PageBlocksCardsFilter {
  style: PageBlocksCardsStyleFilter
  cardStyle: PageBlocksCardsCardStyleFilter
  background: PageBlocksCardsBackgroundFilter
  rule: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  body: RichTextFilter
  buttons: PageBlocksCardsButtonsFilter
  items: PageBlocksCardsItemsFilter
  navigationLabel: StringFilter
}

input PageBlocksAccordianStyleFilter {
  alignment: StringFilter
  padding: StringFilter
  featureContent: StringFilter
  typographyTitle: StringFilter
  labelStyles: StringFilter
  headlineStyles: StringFilter
  subheadStyles: StringFilter
  textStyles: StringFilter
}

input PageBlocksAccordianCardStyleFilter {
  fillStyles: StringFilter
  fillStylesActive: StringFilter
  padding: StringFilter
  borderStyles: StringFilter
  typographyTitle: StringFilter
  headlineStyles: StringFilter
  subheadStyles: StringFilter
  textStyles: StringFilter
}

input PageBlocksAccordianBackgroundOrnamentsFilter {
  src: ImageFilter
  alignment: StringFilter
  width: StringFilter
  height: StringFilter
  xOffset: StringFilter
  yOffset: StringFilter
}

input PageBlocksAccordianBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: PageBlocksAccordianBackgroundOrnamentsFilter
}

input PageBlocksAccordianButtonsFilter {
  label: StringFilter
  link: StringFilter
  buttonStyle: StringFilter
  fathomId: StringFilter
}

input PageBlocksAccordianItemsFilter {
  headline: StringFilter
  subhead: StringFilter
  text: RichTextFilter
}

input PageBlocksAccordianFilter {
  style: PageBlocksAccordianStyleFilter
  cardStyle: PageBlocksAccordianCardStyleFilter
  background: PageBlocksAccordianBackgroundFilter
  rule: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  body: RichTextFilter
  buttons: PageBlocksAccordianButtonsFilter
  items: PageBlocksAccordianItemsFilter
  navigationLabel: StringFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input PageBlocksEmbedStyleFilter {
  fullWidth: BooleanFilter
  minHeight: StringFilter
  padding: StringFilter
}

input GlobalBlocksEmbedBackgroundOrnamentsFilter {
  src: ImageFilter
  alignment: StringFilter
  width: StringFilter
  height: StringFilter
  xOffset: StringFilter
  yOffset: StringFilter
}

input PageBlocksEmbedBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: GlobalBlocksEmbedBackgroundOrnamentsFilter
}

input PageBlocksEmbedFilter {
  style: PageBlocksEmbedStyleFilter
  background: PageBlocksEmbedBackgroundFilter
  markup: StringFilter
  navigationLabel: StringFilter
}

input PageBlocksTailwindFeatureTailwindFilter {
  section: StringFilter
  wrap: StringFilter
  imageWrap: StringFilter
  image: StringFilter
  contentWrap: StringFilter
  content: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  text: StringFilter
  buttons: StringFilter
  button: StringFilter
}

input GlobalBlocksTailwindFeatureBackgroundOrnamentsFilter {
  src: ImageFilter
  alignment: StringFilter
  width: StringFilter
  height: StringFilter
  xOffset: StringFilter
  yOffset: StringFilter
}

input PageBlocksTailwindFeatureBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: GlobalBlocksTailwindFeatureBackgroundOrnamentsFilter
}

input PageBlocksTailwindFeatureImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PageBlocksTailwindFeatureButtonsFilter {
  label: StringFilter
  link: StringFilter
  buttonStyle: StringFilter
  fathomId: StringFilter
}

input PageBlocksTailwindFeatureFilter {
  tailwind: PageBlocksTailwindFeatureTailwindFilter
  background: PageBlocksTailwindFeatureBackgroundFilter
  image: PageBlocksTailwindFeatureImageFilter
  rule: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  body: RichTextFilter
  buttons: PageBlocksTailwindFeatureButtonsFilter
  navigationLabel: StringFilter
}

input PageBlocksTailwindCardsTailwindFilter {
  section: StringFilter
  wrap: StringFilter
  imageWrap: StringFilter
  image: StringFilter
  contentWrap: StringFilter
  content: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  text: StringFilter
  buttons: StringFilter
  button: StringFilter
  rule: StringFilter
  cardWrap: StringFilter
  card: StringFilter
  cardImageWrap: StringFilter
  cardImage: StringFilter
  cardContentWrap: StringFilter
  cardContent: StringFilter
  cardLabel: StringFilter
  cardHeadline: StringFilter
  cardSubhead: StringFilter
  cardText: StringFilter
  cardButtons: StringFilter
  cardButton: StringFilter
}

input GlobalBlocksTailwindCardsBackgroundOrnamentsFilter {
  src: ImageFilter
  alignment: StringFilter
  width: StringFilter
  height: StringFilter
  xOffset: StringFilter
  yOffset: StringFilter
}

input PageBlocksTailwindCardsBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: GlobalBlocksTailwindCardsBackgroundOrnamentsFilter
}

input PageBlocksTailwindCardsButtonsFilter {
  label: StringFilter
  link: StringFilter
  buttonStyle: StringFilter
  fathomId: StringFilter
}

input GlobalBlocksTailwindCardsItemsImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PageBlocksTailwindCardsItemsFilter {
  image: GlobalBlocksTailwindCardsItemsImageFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  text: RichTextFilter
  link: StringFilter
  buttonLabel: StringFilter
}

input PageBlocksTailwindCardsFilter {
  tailwind: PageBlocksTailwindCardsTailwindFilter
  background: PageBlocksTailwindCardsBackgroundFilter
  rule: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  body: RichTextFilter
  buttons: PageBlocksTailwindCardsButtonsFilter
  items: PageBlocksTailwindCardsItemsFilter
  navigationLabel: StringFilter
}

input PageBlocksEventScheduleBackgroundOrnamentsFilter {
  src: ImageFilter
  alignment: StringFilter
  width: StringFilter
  height: StringFilter
  xOffset: StringFilter
  yOffset: StringFilter
}

input PageBlocksEventScheduleBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: PageBlocksEventScheduleBackgroundOrnamentsFilter
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageBlocksEventScheduleFilter {
  background: PageBlocksEventScheduleBackgroundFilter
  navigationLabel: StringFilter
  scheduleStartDate: DatetimeFilter
  scheduleEndDate: DatetimeFilter
  addEventLink: StringFilter
}

input PageBlocksEventTimelineStyleFilter {
  fullWidth: BooleanFilter
  minHeight: StringFilter
  padding: StringFilter
  typographyTitle: StringFilter
  labelStyles: StringFilter
  headlineStyles: StringFilter
  subheadStyles: StringFilter
  textStyles: StringFilter
}

input PageBlocksEventTimelineBackgroundOrnamentsFilter {
  src: ImageFilter
  alignment: StringFilter
  width: StringFilter
  height: StringFilter
  xOffset: StringFilter
  yOffset: StringFilter
}

input PageBlocksEventTimelineBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: PageBlocksEventTimelineBackgroundOrnamentsFilter
}

input PageBlocksEventTimelineFilter {
  style: PageBlocksEventTimelineStyleFilter
  background: PageBlocksEventTimelineBackgroundFilter
  fathomId: StringFilter
  navigationLabel: StringFilter
}

input PageBlocksFilter {
  feature: PageBlocksFeatureFilter
  cards: PageBlocksCardsFilter
  accordian: PageBlocksAccordianFilter
  embed: PageBlocksEmbedFilter
  tailwindFeature: PageBlocksTailwindFeatureFilter
  tailwindCards: PageBlocksTailwindCardsFilter
  eventSchedule: PageBlocksEventScheduleFilter
  eventTimeline: PageBlocksEventTimelineFilter
}

input PageMetaFilter {
  title: StringFilter
  description: StringFilter
  ogImage: ImageFilter
}

input PageFilter {
  blocks: PageBlocksFilter
  backgroundColor: StringFilter
  meta: PageMetaFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Post implements Node & Document {
  title: String!
  heroImg: String
  excerpt: JSON
  date: String
  _body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Post_bodyDateTimeFilter {
  format: StringFilter
}

input Post_bodyBlockQuoteFilter {
  children: RichTextFilter
}

input Post_bodyNewsletterSignupFilter {
  children: RichTextFilter
  placeholder: StringFilter
  buttonText: StringFilter
  disclaimer: RichTextFilter
}

input Post_bodyFilter {
  DateTime: Post_bodyDateTimeFilter
  BlockQuote: Post_bodyBlockQuoteFilter
  NewsletterSignup: Post_bodyNewsletterSignupFilter
}

input PostFilter {
  title: StringFilter
  heroImg: ImageFilter
  excerpt: RichTextFilter
  date: DatetimeFilter
  _body: Post_bodyFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type EventTimeslots {
  time: String
  title: String
  speakers: String
  description: JSON
}

type Event implements Node & Document {
  name: String!
  description: JSON
  date: String!
  days: Float
  times: String
  timeslots: [EventTimeslots]
  venueName: String
  venueAddress: String
  website: String
  logomark: String
  attendees: Float
  label: String
  org: String
  dri: String
  tags: [String]
  priority: Float
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input EventTimeslotsFilter {
  time: StringFilter
  title: StringFilter
  speakers: StringFilter
  description: RichTextFilter
}

input EventFilter {
  name: StringFilter
  description: RichTextFilter
  date: DatetimeFilter
  days: NumberFilter
  times: StringFilter
  timeslots: EventTimeslotsFilter
  venueName: StringFilter
  venueAddress: StringFilter
  website: StringFilter
  logomark: ImageFilter
  attendees: NumberFilter
  label: StringFilter
  org: StringFilter
  dri: StringFilter
  tags: StringFilter
  priority: NumberFilter
}

type EventConnectionEdges {
  cursor: String!
  node: Event
}

type EventConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [EventConnectionEdges]
}

type ThemeColors {
  primary: String
  accent1: String
  accent2: String
  accent3: String
  accent4: String
  white: String
  grayLight: String
  gray: String
  grayDark: String
  black: String
}

type ThemeTypo {
  label: String
  typography: String
}

type ThemeButtons {
  label: String
  fill: String
  typography: String
  padding: String
  primaryBorder: String
  primaryRounded: String
}

type Theme implements Node & Document {
  name: String
  desktopWidth: String
  colors: ThemeColors
  typo: [ThemeTypo]
  buttons: [ThemeButtons]
  linkColor: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ThemeColorsFilter {
  primary: StringFilter
  accent1: StringFilter
  accent2: StringFilter
  accent3: StringFilter
  accent4: StringFilter
  white: StringFilter
  grayLight: StringFilter
  gray: StringFilter
  grayDark: StringFilter
  black: StringFilter
}

input ThemeTypoFilter {
  label: StringFilter
  typography: StringFilter
}

input ThemeButtonsFilter {
  label: StringFilter
  fill: StringFilter
  typography: StringFilter
  padding: StringFilter
  primaryBorder: StringFilter
  primaryRounded: StringFilter
}

input ThemeFilter {
  name: StringFilter
  desktopWidth: StringFilter
  colors: ThemeColorsFilter
  typo: ThemeTypoFilter
  buttons: ThemeButtonsFilter
  linkColor: StringFilter
}

type ThemeConnectionEdges {
  cursor: String!
  node: Theme
}

type ThemeConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ThemeConnectionEdges]
}

union GlobalTheme = Theme

type GlobalLogo {
  logoType: String
  logoTypeStyle: String
  image: String
  imageWidth: String
  imageHeight: String
  imageMargin: String
}

type GlobalNavNavItemsSubNavItems {
  label: String
  link: String
}

type GlobalNavNavItems {
  label: String
  link: String
  subNavItems: [GlobalNavNavItemsSubNavItems]
}

type GlobalNav {
  navItems: [GlobalNavNavItems]
  navAlignment: String
  navTypeStyle: String
  navBackgroundColor: String
  padding: String
}

type GlobalBlocksCardsStyle {
  alignment: String
  padding: String
  featureContent: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

type GlobalBlocksCardsCardStyle {
  fillStyles: String
  grid: String
  alignment: String
  image: String
  imagePadding: String
  contentPadding: String
  borderStyles: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
  buttonTitle: String
  buttonType: String
  buttonLayout: String
  buttonWidth: String
}

type GlobalBlocksCardsBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksCardsBackgroundOrnaments]
}

type GlobalBlocksCardsButtons {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

type GlobalBlocksCardsItems {
  image: GlobalBlocksCardsItemsImage
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  link: String
  buttonLabel: String
}

type GlobalBlocksCards {
  style: GlobalBlocksCardsStyle
  cardStyle: GlobalBlocksCardsCardStyle
  background: GlobalBlocksCardsBackground
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [GlobalBlocksCardsButtons]
  items: [GlobalBlocksCardsItems]
  navigationLabel: String
}

type GlobalBlocksEmbedStyle {
  fullWidth: Boolean
  minHeight: String
  padding: String
}

type GlobalBlocksEmbedBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksEmbedBackgroundOrnaments]
}

type GlobalBlocksEmbed {
  style: GlobalBlocksEmbedStyle
  background: GlobalBlocksEmbedBackground
  markup: String
  navigationLabel: String
}

type GlobalBlocksFeatureStyle {
  alignment: String
  padding: String
  featureImage: String
  featureContent: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

type GlobalBlocksFeatureBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksFeatureBackgroundOrnaments]
}

type GlobalBlocksFeatureImage {
  src: String
  alt: String
}

type GlobalBlocksFeatureButtons {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

type GlobalBlocksFeature {
  style: GlobalBlocksFeatureStyle
  background: GlobalBlocksFeatureBackground
  image: GlobalBlocksFeatureImage
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [GlobalBlocksFeatureButtons]
  navigationLabel: String
}

type GlobalBlocksTailwindFeatureTailwind {
  section: String
  wrap: String
  imageWrap: String
  image: String
  contentWrap: String
  content: String
  label: String
  headline: String
  subhead: String
  text: String
  buttons: String
  button: String
}

type GlobalBlocksTailwindFeatureBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksTailwindFeatureBackgroundOrnaments]
}

type GlobalBlocksTailwindFeatureImage {
  src: String
  alt: String
}

type GlobalBlocksTailwindFeatureButtons {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

type GlobalBlocksTailwindFeature {
  tailwind: GlobalBlocksTailwindFeatureTailwind
  background: GlobalBlocksTailwindFeatureBackground
  image: GlobalBlocksTailwindFeatureImage
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [GlobalBlocksTailwindFeatureButtons]
  navigationLabel: String
}

type GlobalBlocksTailwindCardsTailwind {
  section: String
  wrap: String
  imageWrap: String
  image: String
  contentWrap: String
  content: String
  label: String
  headline: String
  subhead: String
  text: String
  buttons: String
  button: String
  rule: String
  cardWrap: String
  card: String
  cardImageWrap: String
  cardImage: String
  cardContentWrap: String
  cardContent: String
  cardLabel: String
  cardHeadline: String
  cardSubhead: String
  cardText: String
  cardButtons: String
  cardButton: String
}

type GlobalBlocksTailwindCardsBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksTailwindCardsBackgroundOrnaments]
}

type GlobalBlocksTailwindCardsButtons {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

type GlobalBlocksTailwindCardsItems {
  image: GlobalBlocksTailwindCardsItemsImage
  label: String
  headline: String
  subhead: String
  text: JSON
  link: String
  buttonLabel: String
}

type GlobalBlocksTailwindCards {
  tailwind: GlobalBlocksTailwindCardsTailwind
  background: GlobalBlocksTailwindCardsBackground
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [GlobalBlocksTailwindCardsButtons]
  items: [GlobalBlocksTailwindCardsItems]
  navigationLabel: String
}

union GlobalBlocks = GlobalBlocksCards | GlobalBlocksEmbed | GlobalBlocksFeature | GlobalBlocksTailwindFeature | GlobalBlocksTailwindCards

type Global implements Node & Document {
  siteUrl: String
  favicon: String
  gtmId: String
  fathomSiteId: String
  theme: GlobalTheme
  rule: String
  logo: GlobalLogo
  nav: GlobalNav
  blocks: [GlobalBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input GlobalThemeFilter {
  theme: ThemeFilter
}

input GlobalLogoFilter {
  logoType: StringFilter
  logoTypeStyle: StringFilter
  image: ImageFilter
  imageWidth: StringFilter
  imageHeight: StringFilter
  imageMargin: StringFilter
}

input GlobalNavNavItemsSubNavItemsFilter {
  label: StringFilter
  link: StringFilter
}

input GlobalNavNavItemsFilter {
  label: StringFilter
  link: StringFilter
  subNavItems: GlobalNavNavItemsSubNavItemsFilter
}

input GlobalNavFilter {
  navItems: GlobalNavNavItemsFilter
  navAlignment: StringFilter
  navTypeStyle: StringFilter
  navBackgroundColor: StringFilter
  padding: StringFilter
}

input GlobalBlocksCardsStyleFilter {
  alignment: StringFilter
  padding: StringFilter
  featureContent: StringFilter
  typographyTitle: StringFilter
  labelStyles: StringFilter
  headlineStyles: StringFilter
  subheadStyles: StringFilter
  textStyles: StringFilter
}

input GlobalBlocksCardsCardStyleFilter {
  fillStyles: StringFilter
  grid: StringFilter
  alignment: StringFilter
  image: StringFilter
  imagePadding: StringFilter
  contentPadding: StringFilter
  borderStyles: StringFilter
  typographyTitle: StringFilter
  labelStyles: StringFilter
  headlineStyles: StringFilter
  subheadStyles: StringFilter
  textStyles: StringFilter
  buttonTitle: StringFilter
  buttonType: StringFilter
  buttonLayout: StringFilter
  buttonWidth: StringFilter
}

input GlobalBlocksCardsBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: GlobalBlocksCardsBackgroundOrnamentsFilter
}

input GlobalBlocksCardsButtonsFilter {
  label: StringFilter
  link: StringFilter
  buttonStyle: StringFilter
  fathomId: StringFilter
}

input GlobalBlocksCardsItemsFilter {
  image: GlobalBlocksCardsItemsImageFilter
  rule: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  body: RichTextFilter
  link: StringFilter
  buttonLabel: StringFilter
}

input GlobalBlocksCardsFilter {
  style: GlobalBlocksCardsStyleFilter
  cardStyle: GlobalBlocksCardsCardStyleFilter
  background: GlobalBlocksCardsBackgroundFilter
  rule: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  body: RichTextFilter
  buttons: GlobalBlocksCardsButtonsFilter
  items: GlobalBlocksCardsItemsFilter
  navigationLabel: StringFilter
}

input GlobalBlocksEmbedStyleFilter {
  fullWidth: BooleanFilter
  minHeight: StringFilter
  padding: StringFilter
}

input GlobalBlocksEmbedBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: GlobalBlocksEmbedBackgroundOrnamentsFilter
}

input GlobalBlocksEmbedFilter {
  style: GlobalBlocksEmbedStyleFilter
  background: GlobalBlocksEmbedBackgroundFilter
  markup: StringFilter
  navigationLabel: StringFilter
}

input GlobalBlocksFeatureStyleFilter {
  alignment: StringFilter
  padding: StringFilter
  featureImage: StringFilter
  featureContent: StringFilter
  typographyTitle: StringFilter
  labelStyles: StringFilter
  headlineStyles: StringFilter
  subheadStyles: StringFilter
  textStyles: StringFilter
}

input GlobalBlocksFeatureBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: GlobalBlocksFeatureBackgroundOrnamentsFilter
}

input GlobalBlocksFeatureImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input GlobalBlocksFeatureButtonsFilter {
  label: StringFilter
  link: StringFilter
  buttonStyle: StringFilter
  fathomId: StringFilter
}

input GlobalBlocksFeatureFilter {
  style: GlobalBlocksFeatureStyleFilter
  background: GlobalBlocksFeatureBackgroundFilter
  image: GlobalBlocksFeatureImageFilter
  rule: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  body: RichTextFilter
  buttons: GlobalBlocksFeatureButtonsFilter
  navigationLabel: StringFilter
}

input GlobalBlocksTailwindFeatureTailwindFilter {
  section: StringFilter
  wrap: StringFilter
  imageWrap: StringFilter
  image: StringFilter
  contentWrap: StringFilter
  content: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  text: StringFilter
  buttons: StringFilter
  button: StringFilter
}

input GlobalBlocksTailwindFeatureBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: GlobalBlocksTailwindFeatureBackgroundOrnamentsFilter
}

input GlobalBlocksTailwindFeatureImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input GlobalBlocksTailwindFeatureButtonsFilter {
  label: StringFilter
  link: StringFilter
  buttonStyle: StringFilter
  fathomId: StringFilter
}

input GlobalBlocksTailwindFeatureFilter {
  tailwind: GlobalBlocksTailwindFeatureTailwindFilter
  background: GlobalBlocksTailwindFeatureBackgroundFilter
  image: GlobalBlocksTailwindFeatureImageFilter
  rule: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  body: RichTextFilter
  buttons: GlobalBlocksTailwindFeatureButtonsFilter
  navigationLabel: StringFilter
}

input GlobalBlocksTailwindCardsTailwindFilter {
  section: StringFilter
  wrap: StringFilter
  imageWrap: StringFilter
  image: StringFilter
  contentWrap: StringFilter
  content: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  text: StringFilter
  buttons: StringFilter
  button: StringFilter
  rule: StringFilter
  cardWrap: StringFilter
  card: StringFilter
  cardImageWrap: StringFilter
  cardImage: StringFilter
  cardContentWrap: StringFilter
  cardContent: StringFilter
  cardLabel: StringFilter
  cardHeadline: StringFilter
  cardSubhead: StringFilter
  cardText: StringFilter
  cardButtons: StringFilter
  cardButton: StringFilter
}

input GlobalBlocksTailwindCardsBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: GlobalBlocksTailwindCardsBackgroundOrnamentsFilter
}

input GlobalBlocksTailwindCardsButtonsFilter {
  label: StringFilter
  link: StringFilter
  buttonStyle: StringFilter
  fathomId: StringFilter
}

input GlobalBlocksTailwindCardsItemsFilter {
  image: GlobalBlocksTailwindCardsItemsImageFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  text: RichTextFilter
  link: StringFilter
  buttonLabel: StringFilter
}

input GlobalBlocksTailwindCardsFilter {
  tailwind: GlobalBlocksTailwindCardsTailwindFilter
  background: GlobalBlocksTailwindCardsBackgroundFilter
  rule: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  body: RichTextFilter
  buttons: GlobalBlocksTailwindCardsButtonsFilter
  items: GlobalBlocksTailwindCardsItemsFilter
  navigationLabel: StringFilter
}

input GlobalBlocksFilter {
  cards: GlobalBlocksCardsFilter
  embed: GlobalBlocksEmbedFilter
  feature: GlobalBlocksFeatureFilter
  tailwindFeature: GlobalBlocksTailwindFeatureFilter
  tailwindCards: GlobalBlocksTailwindCardsFilter
}

input GlobalFilter {
  siteUrl: StringFilter
  favicon: ImageFilter
  gtmId: StringFilter
  fathomSiteId: StringFilter
  theme: GlobalThemeFilter
  rule: StringFilter
  logo: GlobalLogoFilter
  nav: GlobalNavFilter
  blocks: GlobalBlocksFilter
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateEvent(relativePath: String!, params: EventMutation!): Event!
  createEvent(relativePath: String!, params: EventMutation!): Event!
  updateTheme(relativePath: String!, params: ThemeMutation!): Theme!
  createTheme(relativePath: String!, params: ThemeMutation!): Theme!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
}

input DocumentUpdateMutation {
  page: PageMutation
  post: PostMutation
  event: EventMutation
  theme: ThemeMutation
  global: GlobalMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
  post: PostMutation
  event: EventMutation
  theme: ThemeMutation
  global: GlobalMutation
}

input PageBlocksFeatureStyleMutation {
  alignment: String
  padding: String
  featureImage: String
  featureContent: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

input GlobalBlocksFeatureBackgroundOrnamentsMutation {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

input PageBlocksFeatureBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksFeatureBackgroundOrnamentsMutation]
}

input PageBlocksFeatureImageMutation {
  src: String
  alt: String
}

input PageBlocksFeatureButtonsMutation {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

input PageBlocksFeatureMutation {
  style: PageBlocksFeatureStyleMutation
  background: PageBlocksFeatureBackgroundMutation
  image: PageBlocksFeatureImageMutation
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [PageBlocksFeatureButtonsMutation]
  navigationLabel: String
}

input PageBlocksCardsStyleMutation {
  alignment: String
  padding: String
  featureContent: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

input PageBlocksCardsCardStyleMutation {
  fillStyles: String
  grid: String
  alignment: String
  image: String
  imagePadding: String
  contentPadding: String
  borderStyles: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
  buttonTitle: String
  buttonType: String
  buttonLayout: String
  buttonWidth: String
}

input GlobalBlocksCardsBackgroundOrnamentsMutation {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

input PageBlocksCardsBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksCardsBackgroundOrnamentsMutation]
}

input PageBlocksCardsButtonsMutation {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

input GlobalBlocksCardsItemsImageMutation {
  src: String
  alt: String
}

input PageBlocksCardsItemsMutation {
  image: GlobalBlocksCardsItemsImageMutation
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  link: String
  buttonLabel: String
}

input PageBlocksCardsMutation {
  style: PageBlocksCardsStyleMutation
  cardStyle: PageBlocksCardsCardStyleMutation
  background: PageBlocksCardsBackgroundMutation
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [PageBlocksCardsButtonsMutation]
  items: [PageBlocksCardsItemsMutation]
  navigationLabel: String
}

input PageBlocksAccordianStyleMutation {
  alignment: String
  padding: String
  featureContent: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

input PageBlocksAccordianCardStyleMutation {
  fillStyles: String
  fillStylesActive: String
  padding: String
  borderStyles: String
  typographyTitle: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

input PageBlocksAccordianBackgroundOrnamentsMutation {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

input PageBlocksAccordianBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [PageBlocksAccordianBackgroundOrnamentsMutation]
}

input PageBlocksAccordianButtonsMutation {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

input PageBlocksAccordianItemsMutation {
  headline: String
  subhead: String
  text: JSON
}

input PageBlocksAccordianMutation {
  style: PageBlocksAccordianStyleMutation
  cardStyle: PageBlocksAccordianCardStyleMutation
  background: PageBlocksAccordianBackgroundMutation
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [PageBlocksAccordianButtonsMutation]
  items: [PageBlocksAccordianItemsMutation]
  navigationLabel: String
}

input PageBlocksEmbedStyleMutation {
  fullWidth: Boolean
  minHeight: String
  padding: String
}

input GlobalBlocksEmbedBackgroundOrnamentsMutation {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

input PageBlocksEmbedBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksEmbedBackgroundOrnamentsMutation]
}

input PageBlocksEmbedMutation {
  style: PageBlocksEmbedStyleMutation
  background: PageBlocksEmbedBackgroundMutation
  markup: String
  navigationLabel: String
}

input PageBlocksTailwindFeatureTailwindMutation {
  section: String
  wrap: String
  imageWrap: String
  image: String
  contentWrap: String
  content: String
  label: String
  headline: String
  subhead: String
  text: String
  buttons: String
  button: String
}

input GlobalBlocksTailwindFeatureBackgroundOrnamentsMutation {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

input PageBlocksTailwindFeatureBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksTailwindFeatureBackgroundOrnamentsMutation]
}

input PageBlocksTailwindFeatureImageMutation {
  src: String
  alt: String
}

input PageBlocksTailwindFeatureButtonsMutation {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

input PageBlocksTailwindFeatureMutation {
  tailwind: PageBlocksTailwindFeatureTailwindMutation
  background: PageBlocksTailwindFeatureBackgroundMutation
  image: PageBlocksTailwindFeatureImageMutation
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [PageBlocksTailwindFeatureButtonsMutation]
  navigationLabel: String
}

input PageBlocksTailwindCardsTailwindMutation {
  section: String
  wrap: String
  imageWrap: String
  image: String
  contentWrap: String
  content: String
  label: String
  headline: String
  subhead: String
  text: String
  buttons: String
  button: String
  rule: String
  cardWrap: String
  card: String
  cardImageWrap: String
  cardImage: String
  cardContentWrap: String
  cardContent: String
  cardLabel: String
  cardHeadline: String
  cardSubhead: String
  cardText: String
  cardButtons: String
  cardButton: String
}

input GlobalBlocksTailwindCardsBackgroundOrnamentsMutation {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

input PageBlocksTailwindCardsBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksTailwindCardsBackgroundOrnamentsMutation]
}

input PageBlocksTailwindCardsButtonsMutation {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

input GlobalBlocksTailwindCardsItemsImageMutation {
  src: String
  alt: String
}

input PageBlocksTailwindCardsItemsMutation {
  image: GlobalBlocksTailwindCardsItemsImageMutation
  label: String
  headline: String
  subhead: String
  text: JSON
  link: String
  buttonLabel: String
}

input PageBlocksTailwindCardsMutation {
  tailwind: PageBlocksTailwindCardsTailwindMutation
  background: PageBlocksTailwindCardsBackgroundMutation
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [PageBlocksTailwindCardsButtonsMutation]
  items: [PageBlocksTailwindCardsItemsMutation]
  navigationLabel: String
}

input PageBlocksEventScheduleBackgroundOrnamentsMutation {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

input PageBlocksEventScheduleBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [PageBlocksEventScheduleBackgroundOrnamentsMutation]
}

input PageBlocksEventScheduleMutation {
  background: PageBlocksEventScheduleBackgroundMutation
  navigationLabel: String
  scheduleStartDate: String
  scheduleEndDate: String
  addEventLink: String
}

input PageBlocksEventTimelineStyleMutation {
  fullWidth: Boolean
  minHeight: String
  padding: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

input PageBlocksEventTimelineBackgroundOrnamentsMutation {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

input PageBlocksEventTimelineBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [PageBlocksEventTimelineBackgroundOrnamentsMutation]
}

input PageBlocksEventTimelineMutation {
  style: PageBlocksEventTimelineStyleMutation
  background: PageBlocksEventTimelineBackgroundMutation
  fathomId: String
  navigationLabel: String
}

input PageBlocksMutation {
  feature: PageBlocksFeatureMutation
  cards: PageBlocksCardsMutation
  accordian: PageBlocksAccordianMutation
  embed: PageBlocksEmbedMutation
  tailwindFeature: PageBlocksTailwindFeatureMutation
  tailwindCards: PageBlocksTailwindCardsMutation
  eventSchedule: PageBlocksEventScheduleMutation
  eventTimeline: PageBlocksEventTimelineMutation
}

input PageMetaMutation {
  title: String
  description: String
  ogImage: String
}

input PageMutation {
  blocks: [PageBlocksMutation]
  backgroundColor: String
  meta: PageMetaMutation
}

input PostMutation {
  title: String
  heroImg: String
  excerpt: JSON
  date: String
  _body: JSON
}

input EventTimeslotsMutation {
  time: String
  title: String
  speakers: String
  description: JSON
}

input EventMutation {
  name: String
  description: JSON
  date: String
  days: Float
  times: String
  timeslots: [EventTimeslotsMutation]
  venueName: String
  venueAddress: String
  website: String
  logomark: String
  attendees: Float
  label: String
  org: String
  dri: String
  tags: [String]
  priority: Float
}

input ThemeColorsMutation {
  primary: String
  accent1: String
  accent2: String
  accent3: String
  accent4: String
  white: String
  grayLight: String
  gray: String
  grayDark: String
  black: String
}

input ThemeTypoMutation {
  label: String
  typography: String
}

input ThemeButtonsMutation {
  label: String
  fill: String
  typography: String
  padding: String
  primaryBorder: String
  primaryRounded: String
}

input ThemeMutation {
  name: String
  desktopWidth: String
  colors: ThemeColorsMutation
  typo: [ThemeTypoMutation]
  buttons: [ThemeButtonsMutation]
  linkColor: String
}

input GlobalLogoMutation {
  logoType: String
  logoTypeStyle: String
  image: String
  imageWidth: String
  imageHeight: String
  imageMargin: String
}

input GlobalNavNavItemsSubNavItemsMutation {
  label: String
  link: String
}

input GlobalNavNavItemsMutation {
  label: String
  link: String
  subNavItems: [GlobalNavNavItemsSubNavItemsMutation]
}

input GlobalNavMutation {
  navItems: [GlobalNavNavItemsMutation]
  navAlignment: String
  navTypeStyle: String
  navBackgroundColor: String
  padding: String
}

input GlobalBlocksCardsStyleMutation {
  alignment: String
  padding: String
  featureContent: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

input GlobalBlocksCardsCardStyleMutation {
  fillStyles: String
  grid: String
  alignment: String
  image: String
  imagePadding: String
  contentPadding: String
  borderStyles: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
  buttonTitle: String
  buttonType: String
  buttonLayout: String
  buttonWidth: String
}

input GlobalBlocksCardsBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksCardsBackgroundOrnamentsMutation]
}

input GlobalBlocksCardsButtonsMutation {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

input GlobalBlocksCardsItemsMutation {
  image: GlobalBlocksCardsItemsImageMutation
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  link: String
  buttonLabel: String
}

input GlobalBlocksCardsMutation {
  style: GlobalBlocksCardsStyleMutation
  cardStyle: GlobalBlocksCardsCardStyleMutation
  background: GlobalBlocksCardsBackgroundMutation
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [GlobalBlocksCardsButtonsMutation]
  items: [GlobalBlocksCardsItemsMutation]
  navigationLabel: String
}

input GlobalBlocksEmbedStyleMutation {
  fullWidth: Boolean
  minHeight: String
  padding: String
}

input GlobalBlocksEmbedBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksEmbedBackgroundOrnamentsMutation]
}

input GlobalBlocksEmbedMutation {
  style: GlobalBlocksEmbedStyleMutation
  background: GlobalBlocksEmbedBackgroundMutation
  markup: String
  navigationLabel: String
}

input GlobalBlocksFeatureStyleMutation {
  alignment: String
  padding: String
  featureImage: String
  featureContent: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

input GlobalBlocksFeatureBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksFeatureBackgroundOrnamentsMutation]
}

input GlobalBlocksFeatureImageMutation {
  src: String
  alt: String
}

input GlobalBlocksFeatureButtonsMutation {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

input GlobalBlocksFeatureMutation {
  style: GlobalBlocksFeatureStyleMutation
  background: GlobalBlocksFeatureBackgroundMutation
  image: GlobalBlocksFeatureImageMutation
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [GlobalBlocksFeatureButtonsMutation]
  navigationLabel: String
}

input GlobalBlocksTailwindFeatureTailwindMutation {
  section: String
  wrap: String
  imageWrap: String
  image: String
  contentWrap: String
  content: String
  label: String
  headline: String
  subhead: String
  text: String
  buttons: String
  button: String
}

input GlobalBlocksTailwindFeatureBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksTailwindFeatureBackgroundOrnamentsMutation]
}

input GlobalBlocksTailwindFeatureImageMutation {
  src: String
  alt: String
}

input GlobalBlocksTailwindFeatureButtonsMutation {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

input GlobalBlocksTailwindFeatureMutation {
  tailwind: GlobalBlocksTailwindFeatureTailwindMutation
  background: GlobalBlocksTailwindFeatureBackgroundMutation
  image: GlobalBlocksTailwindFeatureImageMutation
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [GlobalBlocksTailwindFeatureButtonsMutation]
  navigationLabel: String
}

input GlobalBlocksTailwindCardsTailwindMutation {
  section: String
  wrap: String
  imageWrap: String
  image: String
  contentWrap: String
  content: String
  label: String
  headline: String
  subhead: String
  text: String
  buttons: String
  button: String
  rule: String
  cardWrap: String
  card: String
  cardImageWrap: String
  cardImage: String
  cardContentWrap: String
  cardContent: String
  cardLabel: String
  cardHeadline: String
  cardSubhead: String
  cardText: String
  cardButtons: String
  cardButton: String
}

input GlobalBlocksTailwindCardsBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [GlobalBlocksTailwindCardsBackgroundOrnamentsMutation]
}

input GlobalBlocksTailwindCardsButtonsMutation {
  label: String
  link: String
  buttonStyle: String
  fathomId: String
}

input GlobalBlocksTailwindCardsItemsMutation {
  image: GlobalBlocksTailwindCardsItemsImageMutation
  label: String
  headline: String
  subhead: String
  text: JSON
  link: String
  buttonLabel: String
}

input GlobalBlocksTailwindCardsMutation {
  tailwind: GlobalBlocksTailwindCardsTailwindMutation
  background: GlobalBlocksTailwindCardsBackgroundMutation
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [GlobalBlocksTailwindCardsButtonsMutation]
  items: [GlobalBlocksTailwindCardsItemsMutation]
  navigationLabel: String
}

input GlobalBlocksMutation {
  cards: GlobalBlocksCardsMutation
  embed: GlobalBlocksEmbedMutation
  feature: GlobalBlocksFeatureMutation
  tailwindFeature: GlobalBlocksTailwindFeatureMutation
  tailwindCards: GlobalBlocksTailwindCardsMutation
}

input GlobalMutation {
  siteUrl: String
  favicon: String
  gtmId: String
  fathomSiteId: String
  theme: String
  rule: String
  logo: GlobalLogoMutation
  nav: GlobalNavMutation
  blocks: [GlobalBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
