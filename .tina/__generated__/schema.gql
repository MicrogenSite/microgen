# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalFilter): GlobalConnection!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorFilter): AuthorConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
}

input DocumentFilter {
  post: PostFilter
  global: GlobalFilter
  author: AuthorFilter
  page: PageFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Post | Global | Author | Page

union PostAuthor = Author

type Post implements Node & Document {
  title: String!
  heroImg: String
  excerpt: JSON
  author: PostAuthor
  date: String
  _body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PostAuthorFilter {
  author: AuthorFilter
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input Post_bodyDateTimeFilter {
  format: StringFilter
}

input Post_bodyBlockQuoteFilter {
  children: RichTextFilter
  authorName: StringFilter
}

input Post_bodyNewsletterSignupFilter {
  children: RichTextFilter
  placeholder: StringFilter
  buttonText: StringFilter
  disclaimer: RichTextFilter
}

input Post_bodyFilter {
  DateTime: Post_bodyDateTimeFilter
  BlockQuote: Post_bodyBlockQuoteFilter
  NewsletterSignup: Post_bodyNewsletterSignupFilter
}

input PostFilter {
  title: StringFilter
  heroImg: ImageFilter
  excerpt: RichTextFilter
  author: PostAuthorFilter
  date: DatetimeFilter
  _body: Post_bodyFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type GlobalTypography {
  headlineXs: String
  headlineSm: String
  headlineMd: String
  headlineLg: String
  headlineXl: String
  rule: String
  bodyXs: String
  bodySm: String
  bodyMd: String
  bodyLg: String
  bodyXl: String
}

type GlobalColors {
  primary: String
  accent1: String
  accent2: String
  accent3: String
  accent4: String
  white: String
  grayLight: String
  gray: String
  grayDark: String
  black: String
}

type GlobalButtons {
  label: String
  fill: String
  typography: String
  padding: String
  primaryBorder: String
  primaryRounded: String
}

type GlobalHeaderNav {
  href: String
  label: String
}

type GlobalHeader {
  color: String
  nav: [GlobalHeaderNav]
}

type GlobalFooterSocial {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

type GlobalFooter {
  color: String
  social: GlobalFooterSocial
}

type Global implements Node & Document {
  siteUrl: String
  gtmId: String
  favicon: String
  desktopWidth: String
  backgroundColor: String
  rule: String
  typography: GlobalTypography
  colors: GlobalColors
  buttons: [GlobalButtons]
  header: GlobalHeader
  footer: GlobalFooter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input GlobalTypographyFilter {
  headlineXs: StringFilter
  headlineSm: StringFilter
  headlineMd: StringFilter
  headlineLg: StringFilter
  headlineXl: StringFilter
  rule: StringFilter
  bodyXs: StringFilter
  bodySm: StringFilter
  bodyMd: StringFilter
  bodyLg: StringFilter
  bodyXl: StringFilter
}

input GlobalColorsFilter {
  primary: StringFilter
  accent1: StringFilter
  accent2: StringFilter
  accent3: StringFilter
  accent4: StringFilter
  white: StringFilter
  grayLight: StringFilter
  gray: StringFilter
  grayDark: StringFilter
  black: StringFilter
}

input GlobalButtonsFilter {
  label: StringFilter
  fill: StringFilter
  typography: StringFilter
  padding: StringFilter
  primaryBorder: StringFilter
  primaryRounded: StringFilter
}

input GlobalHeaderNavFilter {
  href: StringFilter
  label: StringFilter
}

input GlobalHeaderFilter {
  color: StringFilter
  nav: GlobalHeaderNavFilter
}

input GlobalFooterSocialFilter {
  facebook: StringFilter
  twitter: StringFilter
  instagram: StringFilter
  github: StringFilter
}

input GlobalFooterFilter {
  color: StringFilter
  social: GlobalFooterSocialFilter
}

input GlobalFilter {
  siteUrl: StringFilter
  gtmId: StringFilter
  favicon: ImageFilter
  desktopWidth: StringFilter
  backgroundColor: StringFilter
  rule: StringFilter
  typography: GlobalTypographyFilter
  colors: GlobalColorsFilter
  buttons: GlobalButtonsFilter
  header: GlobalHeaderFilter
  footer: GlobalFooterFilter
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Author implements Node & Document {
  name: String!
  avatar: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AuthorFilter {
  name: StringFilter
  avatar: StringFilter
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

type PageBlocksCardsStyle {
  padding: String
  contentWidth: String
  columns: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

type PageBlocksCardsCardStyle {
  fillStyles: String
  padding: String
  borderStyles: String
  imageStyles: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
  buttonTitle: String
  buttonType: String
}

type PageBlocksCardsBackgroundOrnaments {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

type PageBlocksCardsBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [PageBlocksCardsBackgroundOrnaments]
}

type PageBlocksCardsItemsImage {
  src: String
  alt: String
}

type PageBlocksCardsItems {
  image: PageBlocksCardsItemsImage
  label: String
  headline: String
  subhead: String
  text: JSON
  link: String
  buttonLabel: String
}

type PageBlocksCards {
  style: PageBlocksCardsStyle
  cardStyle: PageBlocksCardsCardStyle
  background: PageBlocksCardsBackground
  label: String
  headline: String
  subhead: String
  body: JSON
  items: [PageBlocksCardsItems]
  navigationLabel: String
}

type PageBlocksEmbedStyle {
  fullWidth: Boolean
  minHeight: String
  padding: String
}

type PageBlocksEmbedBackgroundOrnaments {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

type PageBlocksEmbedBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [PageBlocksEmbedBackgroundOrnaments]
}

type PageBlocksEmbed {
  style: PageBlocksEmbedStyle
  background: PageBlocksEmbedBackground
  markup: String
  navigationLabel: String
}

type PageBlocksFeatureStyle {
  alignment: String
  padding: String
  featureImage: String
  featureContent: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

type PageBlocksFeatureBackgroundOrnaments {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

type PageBlocksFeatureBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [PageBlocksFeatureBackgroundOrnaments]
}

type PageBlocksFeatureImage {
  src: String
  alt: String
}

type PageBlocksFeatureButtons {
  label: String
  link: String
  buttonStyle: String
}

type PageBlocksFeature {
  style: PageBlocksFeatureStyle
  background: PageBlocksFeatureBackground
  image: PageBlocksFeatureImage
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [PageBlocksFeatureButtons]
  navigationLabel: String
}

type PageBlocksTailwindFeatureTailwind {
  section: String
  wrap: String
  imageWrap: String
  image: String
  contentWrap: String
  content: String
  label: String
  headline: String
  subhead: String
  text: String
  buttons: String
  button: String
}

type PageBlocksTailwindFeatureImage {
  src: String
  alt: String
}

type PageBlocksTailwindFeatureBackgroundOrnaments {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

type PageBlocksTailwindFeatureBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [PageBlocksTailwindFeatureBackgroundOrnaments]
}

type PageBlocksTailwindFeatureButtons {
  label: String
  link: String
}

type PageBlocksTailwindFeature {
  tailwind: PageBlocksTailwindFeatureTailwind
  image: PageBlocksTailwindFeatureImage
  background: PageBlocksTailwindFeatureBackground
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [PageBlocksTailwindFeatureButtons]
  rule2: String
  navigationLabel: String
}

type PageBlocksTailwindCardsTailwind {
  section: String
  wrap: String
  imageWrap: String
  image: String
  contentWrap: String
  content: String
  label: String
  headline: String
  subhead: String
  text: String
  buttons: String
  button: String
  rule: String
  cardWrap: String
  card: String
  cardImageWrap: String
  cardImage: String
  cardContentWrap: String
  cardContent: String
  cardLabel: String
  cardHeadline: String
  cardSubhead: String
  cardText: String
  cardButtons: String
  cardButton: String
}

type PageBlocksTailwindCardsImage {
  src: String
  alt: String
}

type PageBlocksTailwindCardsBackgroundOrnaments {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

type PageBlocksTailwindCardsBackground {
  fillStyles: String
  src: String
  position: String
  ornaments: [PageBlocksTailwindCardsBackgroundOrnaments]
}

type PageBlocksTailwindCardsButtons {
  label: String
  link: String
  buttonStyle: String
}

type PageBlocksTailwindCardsItemsImage {
  src: String
  alt: String
}

type PageBlocksTailwindCardsItems {
  image: PageBlocksTailwindCardsItemsImage
  label: String
  headline: String
  subhead: String
  text: JSON
  link: String
  buttonLabel: String
}

type PageBlocksTailwindCards {
  tailwind: PageBlocksTailwindCardsTailwind
  image: PageBlocksTailwindCardsImage
  background: PageBlocksTailwindCardsBackground
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [PageBlocksTailwindCardsButtons]
  items: [PageBlocksTailwindCardsItems]
  rule2: String
  navigationLabel: String
}

union PageBlocks = PageBlocksCards | PageBlocksEmbed | PageBlocksFeature | PageBlocksTailwindFeature | PageBlocksTailwindCards

type Page implements Node & Document {
  title: String!
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PageBlocksCardsStyleFilter {
  padding: StringFilter
  contentWidth: StringFilter
  columns: StringFilter
  typographyTitle: StringFilter
  labelStyles: StringFilter
  headlineStyles: StringFilter
  subheadStyles: StringFilter
  textStyles: StringFilter
}

input PageBlocksCardsCardStyleFilter {
  fillStyles: StringFilter
  padding: StringFilter
  borderStyles: StringFilter
  imageStyles: StringFilter
  typographyTitle: StringFilter
  labelStyles: StringFilter
  headlineStyles: StringFilter
  subheadStyles: StringFilter
  textStyles: StringFilter
  buttonTitle: StringFilter
  buttonType: StringFilter
}

input PageBlocksCardsBackgroundOrnamentsFilter {
  src: ImageFilter
  alignment: StringFilter
  width: StringFilter
  height: StringFilter
  xOffset: StringFilter
  yOffset: StringFilter
}

input PageBlocksCardsBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: PageBlocksCardsBackgroundOrnamentsFilter
}

input PageBlocksCardsItemsImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PageBlocksCardsItemsFilter {
  image: PageBlocksCardsItemsImageFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  text: RichTextFilter
  link: StringFilter
  buttonLabel: StringFilter
}

input PageBlocksCardsFilter {
  style: PageBlocksCardsStyleFilter
  cardStyle: PageBlocksCardsCardStyleFilter
  background: PageBlocksCardsBackgroundFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  body: RichTextFilter
  items: PageBlocksCardsItemsFilter
  navigationLabel: StringFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input PageBlocksEmbedStyleFilter {
  fullWidth: BooleanFilter
  minHeight: StringFilter
  padding: StringFilter
}

input PageBlocksEmbedBackgroundOrnamentsFilter {
  src: ImageFilter
  alignment: StringFilter
  width: StringFilter
  height: StringFilter
  xOffset: StringFilter
  yOffset: StringFilter
}

input PageBlocksEmbedBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: PageBlocksEmbedBackgroundOrnamentsFilter
}

input PageBlocksEmbedFilter {
  style: PageBlocksEmbedStyleFilter
  background: PageBlocksEmbedBackgroundFilter
  markup: StringFilter
  navigationLabel: StringFilter
}

input PageBlocksFeatureStyleFilter {
  alignment: StringFilter
  padding: StringFilter
  featureImage: StringFilter
  featureContent: StringFilter
  typographyTitle: StringFilter
  labelStyles: StringFilter
  headlineStyles: StringFilter
  subheadStyles: StringFilter
  textStyles: StringFilter
}

input PageBlocksFeatureBackgroundOrnamentsFilter {
  src: ImageFilter
  alignment: StringFilter
  width: StringFilter
  height: StringFilter
  xOffset: StringFilter
  yOffset: StringFilter
}

input PageBlocksFeatureBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: PageBlocksFeatureBackgroundOrnamentsFilter
}

input PageBlocksFeatureImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PageBlocksFeatureButtonsFilter {
  label: StringFilter
  link: StringFilter
  buttonStyle: StringFilter
}

input PageBlocksFeatureFilter {
  style: PageBlocksFeatureStyleFilter
  background: PageBlocksFeatureBackgroundFilter
  image: PageBlocksFeatureImageFilter
  rule: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  body: RichTextFilter
  buttons: PageBlocksFeatureButtonsFilter
  navigationLabel: StringFilter
}

input PageBlocksTailwindFeatureTailwindFilter {
  section: StringFilter
  wrap: StringFilter
  imageWrap: StringFilter
  image: StringFilter
  contentWrap: StringFilter
  content: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  text: StringFilter
  buttons: StringFilter
  button: StringFilter
}

input PageBlocksTailwindFeatureImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PageBlocksTailwindFeatureBackgroundOrnamentsFilter {
  src: ImageFilter
  alignment: StringFilter
  width: StringFilter
  height: StringFilter
  xOffset: StringFilter
  yOffset: StringFilter
}

input PageBlocksTailwindFeatureBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: PageBlocksTailwindFeatureBackgroundOrnamentsFilter
}

input PageBlocksTailwindFeatureButtonsFilter {
  label: StringFilter
  link: StringFilter
}

input PageBlocksTailwindFeatureFilter {
  tailwind: PageBlocksTailwindFeatureTailwindFilter
  image: PageBlocksTailwindFeatureImageFilter
  background: PageBlocksTailwindFeatureBackgroundFilter
  rule: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  body: RichTextFilter
  buttons: PageBlocksTailwindFeatureButtonsFilter
  rule2: StringFilter
  navigationLabel: StringFilter
}

input PageBlocksTailwindCardsTailwindFilter {
  section: StringFilter
  wrap: StringFilter
  imageWrap: StringFilter
  image: StringFilter
  contentWrap: StringFilter
  content: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  text: StringFilter
  buttons: StringFilter
  button: StringFilter
  rule: StringFilter
  cardWrap: StringFilter
  card: StringFilter
  cardImageWrap: StringFilter
  cardImage: StringFilter
  cardContentWrap: StringFilter
  cardContent: StringFilter
  cardLabel: StringFilter
  cardHeadline: StringFilter
  cardSubhead: StringFilter
  cardText: StringFilter
  cardButtons: StringFilter
  cardButton: StringFilter
}

input PageBlocksTailwindCardsImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PageBlocksTailwindCardsBackgroundOrnamentsFilter {
  src: ImageFilter
  alignment: StringFilter
  width: StringFilter
  height: StringFilter
  xOffset: StringFilter
  yOffset: StringFilter
}

input PageBlocksTailwindCardsBackgroundFilter {
  fillStyles: StringFilter
  src: ImageFilter
  position: StringFilter
  ornaments: PageBlocksTailwindCardsBackgroundOrnamentsFilter
}

input PageBlocksTailwindCardsButtonsFilter {
  label: StringFilter
  link: StringFilter
  buttonStyle: StringFilter
}

input PageBlocksTailwindCardsItemsImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PageBlocksTailwindCardsItemsFilter {
  image: PageBlocksTailwindCardsItemsImageFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  text: RichTextFilter
  link: StringFilter
  buttonLabel: StringFilter
}

input PageBlocksTailwindCardsFilter {
  tailwind: PageBlocksTailwindCardsTailwindFilter
  image: PageBlocksTailwindCardsImageFilter
  background: PageBlocksTailwindCardsBackgroundFilter
  rule: StringFilter
  label: StringFilter
  headline: StringFilter
  subhead: StringFilter
  body: RichTextFilter
  buttons: PageBlocksTailwindCardsButtonsFilter
  items: PageBlocksTailwindCardsItemsFilter
  rule2: StringFilter
  navigationLabel: StringFilter
}

input PageBlocksFilter {
  cards: PageBlocksCardsFilter
  embed: PageBlocksEmbedFilter
  feature: PageBlocksFeatureFilter
  tailwindFeature: PageBlocksTailwindFeatureFilter
  tailwindCards: PageBlocksTailwindCardsFilter
}

input PageFilter {
  title: StringFilter
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
}

input DocumentMutation {
  post: PostMutation
  global: GlobalMutation
  author: AuthorMutation
  page: PageMutation
}

input PostMutation {
  title: String
  heroImg: String
  excerpt: JSON
  author: String
  date: String
  _body: JSON
}

input GlobalTypographyMutation {
  headlineXs: String
  headlineSm: String
  headlineMd: String
  headlineLg: String
  headlineXl: String
  rule: String
  bodyXs: String
  bodySm: String
  bodyMd: String
  bodyLg: String
  bodyXl: String
}

input GlobalColorsMutation {
  primary: String
  accent1: String
  accent2: String
  accent3: String
  accent4: String
  white: String
  grayLight: String
  gray: String
  grayDark: String
  black: String
}

input GlobalButtonsMutation {
  label: String
  fill: String
  typography: String
  padding: String
  primaryBorder: String
  primaryRounded: String
}

input GlobalHeaderNavMutation {
  href: String
  label: String
}

input GlobalHeaderMutation {
  color: String
  nav: [GlobalHeaderNavMutation]
}

input GlobalFooterSocialMutation {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

input GlobalFooterMutation {
  color: String
  social: GlobalFooterSocialMutation
}

input GlobalMutation {
  siteUrl: String
  gtmId: String
  favicon: String
  desktopWidth: String
  backgroundColor: String
  rule: String
  typography: GlobalTypographyMutation
  colors: GlobalColorsMutation
  buttons: [GlobalButtonsMutation]
  header: GlobalHeaderMutation
  footer: GlobalFooterMutation
}

input AuthorMutation {
  name: String
  avatar: String
}

input PageBlocksCardsStyleMutation {
  padding: String
  contentWidth: String
  columns: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

input PageBlocksCardsCardStyleMutation {
  fillStyles: String
  padding: String
  borderStyles: String
  imageStyles: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
  buttonTitle: String
  buttonType: String
}

input PageBlocksCardsBackgroundOrnamentsMutation {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

input PageBlocksCardsBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [PageBlocksCardsBackgroundOrnamentsMutation]
}

input PageBlocksCardsItemsImageMutation {
  src: String
  alt: String
}

input PageBlocksCardsItemsMutation {
  image: PageBlocksCardsItemsImageMutation
  label: String
  headline: String
  subhead: String
  text: JSON
  link: String
  buttonLabel: String
}

input PageBlocksCardsMutation {
  style: PageBlocksCardsStyleMutation
  cardStyle: PageBlocksCardsCardStyleMutation
  background: PageBlocksCardsBackgroundMutation
  label: String
  headline: String
  subhead: String
  body: JSON
  items: [PageBlocksCardsItemsMutation]
  navigationLabel: String
}

input PageBlocksEmbedStyleMutation {
  fullWidth: Boolean
  minHeight: String
  padding: String
}

input PageBlocksEmbedBackgroundOrnamentsMutation {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

input PageBlocksEmbedBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [PageBlocksEmbedBackgroundOrnamentsMutation]
}

input PageBlocksEmbedMutation {
  style: PageBlocksEmbedStyleMutation
  background: PageBlocksEmbedBackgroundMutation
  markup: String
  navigationLabel: String
}

input PageBlocksFeatureStyleMutation {
  alignment: String
  padding: String
  featureImage: String
  featureContent: String
  typographyTitle: String
  labelStyles: String
  headlineStyles: String
  subheadStyles: String
  textStyles: String
}

input PageBlocksFeatureBackgroundOrnamentsMutation {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

input PageBlocksFeatureBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [PageBlocksFeatureBackgroundOrnamentsMutation]
}

input PageBlocksFeatureImageMutation {
  src: String
  alt: String
}

input PageBlocksFeatureButtonsMutation {
  label: String
  link: String
  buttonStyle: String
}

input PageBlocksFeatureMutation {
  style: PageBlocksFeatureStyleMutation
  background: PageBlocksFeatureBackgroundMutation
  image: PageBlocksFeatureImageMutation
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [PageBlocksFeatureButtonsMutation]
  navigationLabel: String
}

input PageBlocksTailwindFeatureTailwindMutation {
  section: String
  wrap: String
  imageWrap: String
  image: String
  contentWrap: String
  content: String
  label: String
  headline: String
  subhead: String
  text: String
  buttons: String
  button: String
}

input PageBlocksTailwindFeatureImageMutation {
  src: String
  alt: String
}

input PageBlocksTailwindFeatureBackgroundOrnamentsMutation {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

input PageBlocksTailwindFeatureBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [PageBlocksTailwindFeatureBackgroundOrnamentsMutation]
}

input PageBlocksTailwindFeatureButtonsMutation {
  label: String
  link: String
}

input PageBlocksTailwindFeatureMutation {
  tailwind: PageBlocksTailwindFeatureTailwindMutation
  image: PageBlocksTailwindFeatureImageMutation
  background: PageBlocksTailwindFeatureBackgroundMutation
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [PageBlocksTailwindFeatureButtonsMutation]
  rule2: String
  navigationLabel: String
}

input PageBlocksTailwindCardsTailwindMutation {
  section: String
  wrap: String
  imageWrap: String
  image: String
  contentWrap: String
  content: String
  label: String
  headline: String
  subhead: String
  text: String
  buttons: String
  button: String
  rule: String
  cardWrap: String
  card: String
  cardImageWrap: String
  cardImage: String
  cardContentWrap: String
  cardContent: String
  cardLabel: String
  cardHeadline: String
  cardSubhead: String
  cardText: String
  cardButtons: String
  cardButton: String
}

input PageBlocksTailwindCardsImageMutation {
  src: String
  alt: String
}

input PageBlocksTailwindCardsBackgroundOrnamentsMutation {
  src: String
  alignment: String
  width: String
  height: String
  xOffset: String
  yOffset: String
}

input PageBlocksTailwindCardsBackgroundMutation {
  fillStyles: String
  src: String
  position: String
  ornaments: [PageBlocksTailwindCardsBackgroundOrnamentsMutation]
}

input PageBlocksTailwindCardsButtonsMutation {
  label: String
  link: String
  buttonStyle: String
}

input PageBlocksTailwindCardsItemsImageMutation {
  src: String
  alt: String
}

input PageBlocksTailwindCardsItemsMutation {
  image: PageBlocksTailwindCardsItemsImageMutation
  label: String
  headline: String
  subhead: String
  text: JSON
  link: String
  buttonLabel: String
}

input PageBlocksTailwindCardsMutation {
  tailwind: PageBlocksTailwindCardsTailwindMutation
  image: PageBlocksTailwindCardsImageMutation
  background: PageBlocksTailwindCardsBackgroundMutation
  rule: String
  label: String
  headline: String
  subhead: String
  body: JSON
  buttons: [PageBlocksTailwindCardsButtonsMutation]
  items: [PageBlocksTailwindCardsItemsMutation]
  rule2: String
  navigationLabel: String
}

input PageBlocksMutation {
  cards: PageBlocksCardsMutation
  embed: PageBlocksEmbedMutation
  feature: PageBlocksFeatureMutation
  tailwindFeature: PageBlocksTailwindFeatureMutation
  tailwindCards: PageBlocksTailwindCardsMutation
}

input PageMutation {
  title: String
  blocks: [PageBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  